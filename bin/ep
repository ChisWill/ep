#!/usr/bin/env php
<?php

declare(strict_types=1);

use Ep\Console\Application;

(static function () {
    $cwd = getcwd();

    $params = [];
    if (file_exists($cwd . '/.ep')) {
        $content = str_replace("\r\n", "\n", file_get_contents($cwd . '/.ep'));
        $result = explode("\n", $content);
        foreach ($result as $row) {
            $pieces = explode('=', $row);
            if (count($pieces) == 2) {
                $params[trim($pieces[0])] = trim($pieces[1]);
            }
        }
    }

    $possibleAutoloadPaths = [
        $params['autoload'] ?? '',
        $cwd . '/vendor/autoload.php',
        dirname($cwd) . '/autoload.php'
    ];
    unset($params['autoload']);

    $autoloadPath = null;
    foreach ($possibleAutoloadPaths as $path) {
        if (file_exists($path)) {
            $autoloadPath = $path;
            break;
        }
    }
    if ($autoloadPath === null) {
        $message = <<<HELP

Unable to find vendor/autoload.php in your current directory.

You should:
- run ./bin/ep from project root.
- run ./ep from vendor/bin.

HELP;
        fwrite(STDERR, $message);
        exit(1);
    }
    require_once $autoloadPath;

    $configPath = $params['config'] ?? dirname($autoloadPath, 2) . '/config/main.php';
    unset($params['config']);
    if (!file_exists($configPath)) {
        $message = "Unable to find config path in \"{$configPath}\"." . PHP_EOL;
        fwrite(STDERR, $message);
        exit(1);
    }

    $config = require($configPath);

    if (count($_SERVER['argv']) === 1 || strpos($_SERVER['argv'][1], '-') === 0) {
        $_SERVER['argv'][] = 'help/index';
    }
    $_SERVER['argv'][] = 'appNamespace=' . ($config['appNamespace'] ?? 'App');
    $_SERVER['argv'][] = 'autoloadPath=' . realpath($autoloadPath);
    foreach ($params as $k => $v) {
        $_SERVER['argv'][] = $k . '=' . $v;
    }

    $config['appNamespace'] = 'Ep';
    $config['commandDirAndSuffix'] = 'Command';
    $config['actionSuffix'] = 'Action';
    $config['defaultAction'] = 'index';

    Ep::init($config);

    Ep::getDi()->get(Application::class)->run();

    exit(0);
})();
