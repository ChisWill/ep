#!/usr/bin/env php
<?php

declare(strict_types=1);

use Ep\Console\Application;

(static function () {
    $cwd = getcwd();
    if (file_exists($cwd . '/.ep')) {
        $content = str_replace("\r\n", "\n", file_get_contents($cwd . '/.ep'));
        $result = explode("\n", $content);
        $params = [];
        foreach ($result as $row) {
            $pieces = explode('=', $row);
            if (count($pieces) == 2) {
                $params[trim($pieces[0])] = trim($pieces[1]);
            }
        }
    } else {
        $params = [];
    }

    $autoloadPath = $params['autoload'] ?? null;

    if ($autoloadPath === null) {
        $possibleAutoloadPaths = [
            $cwd . '/vendor/autoload.php',
            dirname($cwd) . '/autoload.php'
        ];
        foreach ($possibleAutoloadPaths as $path) {
            if (file_exists($path)) {
                $autoloadPath = $path;
                break;
            }
        }
        if ($autoloadPath === null) {
            $message = "Unable to find vendor/autoload.php in your current directory.\n";
            $message .= "You should:\n";
            $message .= "- run ./bin/ep from project root.\n";
            $message .= "- run ./ep from vendor/bin.\n";
            fwrite(STDERR, $message);
            exit(1);
        }
    }
    require_once $autoloadPath;

    $configPath = $params['config'] ?? null;

    if ($configPath === null) {
        $options = getopt('', ['config:']);
        $configPath = $options['config'] ?? dirname($autoloadPath, 2) . '/config/main.php';
    }
    if (!file_exists($configPath)) {
        $message = "Unable to find config path in \"{$configPath}\".\n";
        fwrite(STDERR, $message);
        exit(1);
    }
    $config = require($configPath);

    unset($params['autoload'], $params['config']);
    $_SERVER['argv'][] = 'appNamespace=' . ($config['appNamespace'] ?? 'App');
    $_SERVER['argv'][] = 'autoloadPath=' . realpath($autoloadPath);
    foreach ($params as $k => $v) {
        $_SERVER['argv'][] = $k . '=' . $v;
    }
    $config['appNamespace'] = 'Ep';

    Ep::init($config);

    Ep::getDi()->get(Application::class)->run();

    exit(0);
})();
