#!/usr/bin/env php
<?php

declare(strict_types=1);

use Ep\Console\Application;
use Ep\Console\Factory;

(static function () {
    $cwd = getcwd();

    $options = [];
    if (file_exists($cwd . '/.ep')) {
        $content = str_replace("\r\n", "\n", file_get_contents($cwd . '/.ep'));
        $result = explode("\n", $content);
        foreach ($result as $row) {
            $pieces = explode('=', $row);
            if (count($pieces) == 2) {
                $options[trim($pieces[0])] = trim($pieces[1]);
            }
        }
    }

    $possibleAutoloadPaths = [
        $options['autoload'] ?? '',
        $cwd . '/vendor/autoload.php',
        dirname($cwd) . '/autoload.php'
    ];
    unset($options['autoload']);

    $autoloadPath = null;
    foreach ($possibleAutoloadPaths as $path) {
        if (file_exists($path)) {
            $autoloadPath = $path;
            break;
        }
    }
    if ($autoloadPath === null) {
        $message = <<<HELP

Unable to find vendor/autoload.php in your current directory.

You should:
- run ./bin/ep from project root.
- run ./ep from vendor/bin.

HELP;
        fwrite(STDERR, $message);
        exit(1);
    }
    require($autoloadPath);

    $configPath = $options['config'] ?? dirname($autoloadPath, 2) . '/config/main.php';
    unset($options['config']);
    if (!file_exists($configPath)) {
        $message = "Unable to find config path in \"{$configPath}\".\n";
        fwrite(STDERR, $message);
        exit(1);
    }
    $userConfig = require($configPath);

    $params = [
        'appNamespace' => 'Ep',
        'rootPath' => $userConfig['rootPath'] ?? '',
        'di' => $userConfig['di'] ?? null,
        'params' => $userConfig['params'] ?? [],
        'mysqlDsn' => $userConfig['mysqlDsn'] ?? '',
        'mysqlUsername' => $userConfig['mysqlUsername'] ?? '',
        'mysqlPassword' => $userConfig['mysqlPassword'] ?? '',
        'secretKey' => $userConfig['secretKey'] ?? ''
    ];
    if (isset($userConfig['vendorPath'])) {
        $params['vendorPath'] = $userConfig['vendorPath'];
    }
    if (isset($userConfig['runtimeDir'])) {
        $params['runtimeDir'] = $userConfig['runtimeDir'];
    }

    Ep::init($params);

    $config = Ep::getConfig();
    $request = Ep::getDi()->get(Factory::class)->createRequest();
    if (!$request->getRoute()) {
        $request->setRoute('list');
    }
    $request->setOption('user.appNamespace',  $userConfig['appNamespace'] ?? 'App');
    $request->setOption('user.commandDirAndSuffix', $userConfig['commandDirAndSuffix'] ?? $config->commandDirAndSuffix);
    $request->setOption('user.actionSuffix', $userConfig['actionSuffix'] ?? $config->actionSuffix);
    $request->setOption('user.defaultAction', $userConfig['defaultAction'] ?? $config->defaultAction);
    $request->setOptions($options);

    Ep::getDi()
        ->get(Application::class)
        ->withRequest($request)
        ->run();
})();
